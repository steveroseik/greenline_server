import { MigrationInterface, QueryRunner } from "typeorm";

export class InitialMigration1705759284006 implements MigrationInterface {
    name = 'InitialMigration1705759284006'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE \`role\` (\`id\` int NOT NULL AUTO_INCREMENT, \`name\` varchar(255) NOT NULL, \`type\` varchar(255) NOT NULL, \`description\` varchar(255) NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`courierSheet\` (\`id\` int NOT NULL, \`userId\` varchar(255) NOT NULL, \`status\` int NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, INDEX \`userId\` (\`userId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`sheetOrderStatusHistory\` (\`id\` int NOT NULL, \`sheetOrderId\` int NOT NULL, \`status\` int NOT NULL, \`description\` varchar(255) NOT NULL, \`userId\` varchar(255) NOT NULL, \`createdAt\` timestamp NOT NULL, INDEX \`userId\` (\`userId\`), INDEX \`sheetOrderId\` (\`sheetOrderId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`sheetOrder\` (\`id\` int NOT NULL, \`sheetId\` int NOT NULL, \`orderId\` int NOT NULL, \`latestStatus\` int NOT NULL, \`createdAt\` datetime NOT NULL, INDEX \`orderId\` (\`orderId\`), INDEX \`sheetId\` (\`sheetId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`orderStatus\` (\`id\` int NOT NULL, \`orderId\` int NOT NULL, \`status\` int NOT NULL, \`description\` varchar(255) NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, INDEX \`orderId\` (\`orderId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`financialRequestStatus\` (\`requestId\` int NOT NULL, \`status\` int NOT NULL, \`createdAt\` timestamp NOT NULL, PRIMARY KEY (\`requestId\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`financialTransaction\` (\`id\` int NOT NULL, \`type\` int NOT NULL, \`description\` varchar(255) NOT NULL, \`fromAccountId\` int NOT NULL, \`toAccountId\` int NOT NULL, \`amount\` float(12) NOT NULL, \`receipt\` varchar(255) NOT NULL, \`latestStatus\` int NOT NULL, \`approvedById\` varchar(255) NOT NULL, \`createdAt\` timestamp NOT NULL, INDEX \`approvedById\` (\`approvedById\`), INDEX \`toAccountId\` (\`toAccountId\`), INDEX \`fromAccountId\` (\`fromAccountId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`expense\` (\`id\` int NOT NULL, \`type\` varchar(255) NOT NULL, \`fromAccountId\` int NOT NULL, \`amount\` float(12) NOT NULL, \`receipt\` varchar(255) NOT NULL, \`comment\` varchar(255) NOT NULL, \`createdAt\` timestamp NOT NULL, INDEX \`fromAccountId\` (\`fromAccountId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`financialAccount\` (\`id\` int NOT NULL, \`name\` varchar(255) NOT NULL, \`userId\` varchar(255) NOT NULL, \`merchantId\` int NOT NULL, \`balance\` float(12) NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, INDEX \`merchantId\` (\`merchantId\`), INDEX \`userId\` (\`userId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`merchant\` (\`id\` int NOT NULL, \`name\` varchar(255) NOT NULL, \`includesVAT\` tinyint(1) NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`itemPrices\` (\`id\` int NOT NULL, \`itemSku\` varchar(255) NOT NULL, \`currency\` varchar(255) NOT NULL, \`price\` float(12) NOT NULL, \`discount\` float(12) NOT NULL, \`startDiscount\` timestamp NOT NULL, \`endDiscount\` timestamp NOT NULL, INDEX \`itemSku\` (\`itemSku\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`inventoryHistory\` (\`id\` int NOT NULL, \`itemInBoxId\` int NOT NULL, \`description\` varchar(255) NOT NULL, \`type\` int NOT NULL, \`amount\` int NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, INDEX \`itemInBoxId\` (\`itemInBoxId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`inventoryPrices\` (\`id\` int NOT NULL, \`inventoryId\` int NOT NULL, \`currency\` varchar(255) NOT NULL, \`pricePerUnit\` float(12) NOT NULL, \`discount\` float(12) NOT NULL, \`startDiscount\` timestamp NOT NULL, \`endDiscount\` timestamp NOT NULL, INDEX \`inventoryId\` (\`inventoryId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`inventorySupport\` (\`id\` int NOT NULL, \`inventoryId\` int NOT NULL, \`governorateId\` int NOT NULL, \`zoneId\` int NOT NULL, INDEX \`inventoryId\` (\`inventoryId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`inventory\` (\`id\` int NOT NULL, \`hubId\` int NOT NULL, \`name\` varchar(255) NOT NULL, \`module\` int NOT NULL, \`zone\` varchar(255) NOT NULL, \`rentType\` int NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`rack\` (\`id\` int NOT NULL, \`inventoryId\` int NOT NULL, \`levels\` int NOT NULL, \`name\` varchar(255) NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, INDEX \`inventoryId\` (\`inventoryId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`ballot\` (\`id\` int NOT NULL, \`rackId\` int NOT NULL, \`level\` int NOT NULL, \`name\` varchar(255) NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, INDEX \`rackId\` (\`rackId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`box\` (\`id\` int NOT NULL, \`ballotId\` int NOT NULL, \`name\` varchar(255) NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, INDEX \`ballotId\` (\`ballotId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`itemInBox\` (\`id\` int NOT NULL, \`itemSku\` varchar(255) NOT NULL, \`boxId\` int NOT NULL, \`count\` int NOT NULL, \`minCount\` int NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, INDEX \`boxId\` (\`boxId\`), INDEX \`itemSku\` (\`itemSku\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`item\` (\`sku\` varchar(255) NOT NULL, \`merchantSku\` varchar(255) NOT NULL, \`merchantId\` int NOT NULL, \`name\` varchar(255) NOT NULL, \`description\` varchar(255) NOT NULL, \`imageUrl\` varchar(255) NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, INDEX \`merchantId\` (\`merchantId\`), PRIMARY KEY (\`sku\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`orderItem\` (\`orderId\` int NOT NULL, \`itemSku\` varchar(255) NOT NULL, \`count\` int NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, INDEX \`itemSku\` (\`itemSku\`), PRIMARY KEY (\`orderId\`, \`itemSku\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`orderRelation\` (\`firstOrderId\` int NOT NULL, \`secondOrderId\` int NOT NULL, \`createdAt\` timestamp NOT NULL, INDEX \`secondOrderId\` (\`secondOrderId\`), PRIMARY KEY (\`firstOrderId\`, \`secondOrderId\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`order\` (\`id\` int NOT NULL, \`otherId\` int NOT NULL, \`type\` int NOT NULL, \`userId\` varchar(255) NOT NULL, \`merchantId\` int NOT NULL, \`userAddressId\` int NOT NULL, \`shippingPrice\` float(12) NOT NULL, \`includesVAT\` tinyint(1) NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, INDEX \`userAddressId\` (\`userAddressId\`), INDEX \`merchantId\` (\`merchantId\`), INDEX \`userId\` (\`userId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`userAddress\` (\`id\` int NOT NULL, \`userId\` varchar(255) NOT NULL, \`countryId\` int NOT NULL, \`cityId\` int NOT NULL, \`details\` varchar(255) NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, INDEX \`userId\` (\`userId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`requestStatusHistory\` (\`id\` int NOT NULL, \`requestId\` int NOT NULL, \`status\` int NOT NULL, \`userId\` int NOT NULL, \`createdAt\` timestamp NOT NULL, INDEX \`requestId\` (\`requestId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`request\` (\`id\` int NOT NULL, \`type\` int NOT NULL, \`priority\` int NOT NULL, \`fromId\` varchar(255) NOT NULL, \`description\` varchar(255) NOT NULL, \`status\` int NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, INDEX \`fromId\` (\`fromId\`), PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`user\` (\`id\` varchar(255) NOT NULL, \`type\` int NOT NULL, \`name\` varchar(255) NOT NULL, \`email\` varchar(255) NOT NULL, \`birthdate\` datetime NOT NULL, \`createdAt\` timestamp NOT NULL, \`lastModified\` timestamp NOT NULL, PRIMARY KEY (\`id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`userRole\` (\`userId\` varchar(255) NOT NULL, \`roleId\` int NOT NULL, INDEX \`userId\` (\`userId\`), PRIMARY KEY (\`userId\`, \`roleId\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`requestTo\` (\`requestId\` int NOT NULL, \`toId\` varchar(255) NOT NULL, INDEX \`IDX_b0948e735107443bfd4b56da73\` (\`requestId\`), INDEX \`IDX_eef4b47b0a1c58c9b71c1a4930\` (\`toId\`), PRIMARY KEY (\`requestId\`, \`toId\`)) ENGINE=InnoDB`);
        await queryRunner.query(`ALTER TABLE \`courierSheet\` ADD CONSTRAINT \`FK_a47d0847d957c8c131b7fdb8198\` FOREIGN KEY (\`userId\`) REFERENCES \`user\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`sheetOrderStatusHistory\` ADD CONSTRAINT \`FK_c5320338c30a49742418504f17d\` FOREIGN KEY (\`sheetOrderId\`) REFERENCES \`sheetOrder\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`sheetOrderStatusHistory\` ADD CONSTRAINT \`FK_e80b14bb26efa9a7cd573d1e259\` FOREIGN KEY (\`userId\`) REFERENCES \`user\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`sheetOrder\` ADD CONSTRAINT \`FK_30a67e48d918830c0ae1553b5db\` FOREIGN KEY (\`sheetId\`) REFERENCES \`courierSheet\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`sheetOrder\` ADD CONSTRAINT \`FK_921340992a871353a00bcf9e156\` FOREIGN KEY (\`orderId\`) REFERENCES \`order\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`orderStatus\` ADD CONSTRAINT \`FK_7e8150a61d7f184d1da4b72857a\` FOREIGN KEY (\`orderId\`) REFERENCES \`order\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`financialRequestStatus\` ADD CONSTRAINT \`FK_3bf3f72d1417d6ec542a4665116\` FOREIGN KEY (\`requestId\`) REFERENCES \`financialTransaction\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`financialTransaction\` ADD CONSTRAINT \`FK_c4519c34e9d07757d22ad3051c8\` FOREIGN KEY (\`fromAccountId\`) REFERENCES \`financialAccount\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`financialTransaction\` ADD CONSTRAINT \`FK_53bc5369d14ed87f739a5fab849\` FOREIGN KEY (\`toAccountId\`) REFERENCES \`financialAccount\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`financialTransaction\` ADD CONSTRAINT \`FK_1d185cf3c0bd7a2c5d11e093b3a\` FOREIGN KEY (\`approvedById\`) REFERENCES \`user\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`expense\` ADD CONSTRAINT \`FK_345e0519b9b950e285801baafdd\` FOREIGN KEY (\`fromAccountId\`) REFERENCES \`financialAccount\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`financialAccount\` ADD CONSTRAINT \`FK_a670e57f70920b1fdb08338a2d7\` FOREIGN KEY (\`userId\`) REFERENCES \`user\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`financialAccount\` ADD CONSTRAINT \`FK_7588fea9c1ee5a7cc525fd031b7\` FOREIGN KEY (\`merchantId\`) REFERENCES \`merchant\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`itemPrices\` ADD CONSTRAINT \`FK_d7d1c68cb76ba4b85f0a1dfdf24\` FOREIGN KEY (\`itemSku\`) REFERENCES \`item\`(\`sku\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`inventoryHistory\` ADD CONSTRAINT \`FK_e9179ccb81928c0145dc83e3dc6\` FOREIGN KEY (\`itemInBoxId\`) REFERENCES \`itemInBox\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`inventoryPrices\` ADD CONSTRAINT \`FK_0c3a34ac435305e6585a10ef1c4\` FOREIGN KEY (\`inventoryId\`) REFERENCES \`inventory\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`inventorySupport\` ADD CONSTRAINT \`FK_10c0520727e2755079c58846f0d\` FOREIGN KEY (\`inventoryId\`) REFERENCES \`inventory\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`rack\` ADD CONSTRAINT \`FK_8c308336a04961a117a7f39221d\` FOREIGN KEY (\`inventoryId\`) REFERENCES \`inventory\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`ballot\` ADD CONSTRAINT \`FK_b21481ded566767bcd543497379\` FOREIGN KEY (\`rackId\`) REFERENCES \`rack\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`box\` ADD CONSTRAINT \`FK_b6c0f7a8b3384dc928b79664098\` FOREIGN KEY (\`ballotId\`) REFERENCES \`ballot\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`itemInBox\` ADD CONSTRAINT \`FK_15899cf7865eeec54466eb7045d\` FOREIGN KEY (\`itemSku\`) REFERENCES \`item\`(\`sku\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`itemInBox\` ADD CONSTRAINT \`FK_ba0b401b3b099499b36d2e361d8\` FOREIGN KEY (\`boxId\`) REFERENCES \`box\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`item\` ADD CONSTRAINT \`FK_86817b70f2eada0540115de6368\` FOREIGN KEY (\`merchantId\`) REFERENCES \`merchant\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`orderItem\` ADD CONSTRAINT \`FK_ef8ed42ef2c6feafd1447d96279\` FOREIGN KEY (\`orderId\`) REFERENCES \`order\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`orderItem\` ADD CONSTRAINT \`FK_1867e860af1fbc090ffa878b412\` FOREIGN KEY (\`itemSku\`) REFERENCES \`item\`(\`sku\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`orderRelation\` ADD CONSTRAINT \`FK_f1c1c1b0ba56c2f5f9924717e70\` FOREIGN KEY (\`firstOrderId\`) REFERENCES \`order\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`orderRelation\` ADD CONSTRAINT \`FK_7bc911ae9a06a09f30657a9dee0\` FOREIGN KEY (\`secondOrderId\`) REFERENCES \`order\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`order\` ADD CONSTRAINT \`FK_caabe91507b3379c7ba73637b84\` FOREIGN KEY (\`userId\`) REFERENCES \`user\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`order\` ADD CONSTRAINT \`FK_293ad75db4c3b2aa62996c75ad1\` FOREIGN KEY (\`merchantId\`) REFERENCES \`merchant\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`order\` ADD CONSTRAINT \`FK_a4734288e8248e76b4c7c72390f\` FOREIGN KEY (\`userAddressId\`) REFERENCES \`userAddress\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`userAddress\` ADD CONSTRAINT \`FK_8b251cbfcbf880bcdec80cf36c5\` FOREIGN KEY (\`userId\`) REFERENCES \`user\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`requestStatusHistory\` ADD CONSTRAINT \`FK_7aaa47775d9fcc8bfa4bd827586\` FOREIGN KEY (\`requestId\`) REFERENCES \`request\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`request\` ADD CONSTRAINT \`FK_c344f10cc6327fbc7ab6a8bec51\` FOREIGN KEY (\`fromId\`) REFERENCES \`user\`(\`id\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);
        await queryRunner.query(`ALTER TABLE \`userRole\` ADD CONSTRAINT \`FK_bc794a2ac3d2f53fc2bc04c3cf4\` FOREIGN KEY (\`userId\`) REFERENCES \`user\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`userRole\` ADD CONSTRAINT \`FK_aa72ae0c32996d476c28f12eb78\` FOREIGN KEY (\`roleId\`) REFERENCES \`role\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`requestTo\` ADD CONSTRAINT \`FK_b0948e735107443bfd4b56da733\` FOREIGN KEY (\`requestId\`) REFERENCES \`request\`(\`id\`) ON DELETE CASCADE ON UPDATE CASCADE`);
        await queryRunner.query(`ALTER TABLE \`requestTo\` ADD CONSTRAINT \`FK_eef4b47b0a1c58c9b71c1a4930e\` FOREIGN KEY (\`toId\`) REFERENCES \`user\`(\`id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE \`requestTo\` DROP FOREIGN KEY \`FK_eef4b47b0a1c58c9b71c1a4930e\``);
        await queryRunner.query(`ALTER TABLE \`requestTo\` DROP FOREIGN KEY \`FK_b0948e735107443bfd4b56da733\``);
        await queryRunner.query(`ALTER TABLE \`userRole\` DROP FOREIGN KEY \`FK_aa72ae0c32996d476c28f12eb78\``);
        await queryRunner.query(`ALTER TABLE \`userRole\` DROP FOREIGN KEY \`FK_bc794a2ac3d2f53fc2bc04c3cf4\``);
        await queryRunner.query(`ALTER TABLE \`request\` DROP FOREIGN KEY \`FK_c344f10cc6327fbc7ab6a8bec51\``);
        await queryRunner.query(`ALTER TABLE \`requestStatusHistory\` DROP FOREIGN KEY \`FK_7aaa47775d9fcc8bfa4bd827586\``);
        await queryRunner.query(`ALTER TABLE \`userAddress\` DROP FOREIGN KEY \`FK_8b251cbfcbf880bcdec80cf36c5\``);
        await queryRunner.query(`ALTER TABLE \`order\` DROP FOREIGN KEY \`FK_a4734288e8248e76b4c7c72390f\``);
        await queryRunner.query(`ALTER TABLE \`order\` DROP FOREIGN KEY \`FK_293ad75db4c3b2aa62996c75ad1\``);
        await queryRunner.query(`ALTER TABLE \`order\` DROP FOREIGN KEY \`FK_caabe91507b3379c7ba73637b84\``);
        await queryRunner.query(`ALTER TABLE \`orderRelation\` DROP FOREIGN KEY \`FK_7bc911ae9a06a09f30657a9dee0\``);
        await queryRunner.query(`ALTER TABLE \`orderRelation\` DROP FOREIGN KEY \`FK_f1c1c1b0ba56c2f5f9924717e70\``);
        await queryRunner.query(`ALTER TABLE \`orderItem\` DROP FOREIGN KEY \`FK_1867e860af1fbc090ffa878b412\``);
        await queryRunner.query(`ALTER TABLE \`orderItem\` DROP FOREIGN KEY \`FK_ef8ed42ef2c6feafd1447d96279\``);
        await queryRunner.query(`ALTER TABLE \`item\` DROP FOREIGN KEY \`FK_86817b70f2eada0540115de6368\``);
        await queryRunner.query(`ALTER TABLE \`itemInBox\` DROP FOREIGN KEY \`FK_ba0b401b3b099499b36d2e361d8\``);
        await queryRunner.query(`ALTER TABLE \`itemInBox\` DROP FOREIGN KEY \`FK_15899cf7865eeec54466eb7045d\``);
        await queryRunner.query(`ALTER TABLE \`box\` DROP FOREIGN KEY \`FK_b6c0f7a8b3384dc928b79664098\``);
        await queryRunner.query(`ALTER TABLE \`ballot\` DROP FOREIGN KEY \`FK_b21481ded566767bcd543497379\``);
        await queryRunner.query(`ALTER TABLE \`rack\` DROP FOREIGN KEY \`FK_8c308336a04961a117a7f39221d\``);
        await queryRunner.query(`ALTER TABLE \`inventorySupport\` DROP FOREIGN KEY \`FK_10c0520727e2755079c58846f0d\``);
        await queryRunner.query(`ALTER TABLE \`inventoryPrices\` DROP FOREIGN KEY \`FK_0c3a34ac435305e6585a10ef1c4\``);
        await queryRunner.query(`ALTER TABLE \`inventoryHistory\` DROP FOREIGN KEY \`FK_e9179ccb81928c0145dc83e3dc6\``);
        await queryRunner.query(`ALTER TABLE \`itemPrices\` DROP FOREIGN KEY \`FK_d7d1c68cb76ba4b85f0a1dfdf24\``);
        await queryRunner.query(`ALTER TABLE \`financialAccount\` DROP FOREIGN KEY \`FK_7588fea9c1ee5a7cc525fd031b7\``);
        await queryRunner.query(`ALTER TABLE \`financialAccount\` DROP FOREIGN KEY \`FK_a670e57f70920b1fdb08338a2d7\``);
        await queryRunner.query(`ALTER TABLE \`expense\` DROP FOREIGN KEY \`FK_345e0519b9b950e285801baafdd\``);
        await queryRunner.query(`ALTER TABLE \`financialTransaction\` DROP FOREIGN KEY \`FK_1d185cf3c0bd7a2c5d11e093b3a\``);
        await queryRunner.query(`ALTER TABLE \`financialTransaction\` DROP FOREIGN KEY \`FK_53bc5369d14ed87f739a5fab849\``);
        await queryRunner.query(`ALTER TABLE \`financialTransaction\` DROP FOREIGN KEY \`FK_c4519c34e9d07757d22ad3051c8\``);
        await queryRunner.query(`ALTER TABLE \`financialRequestStatus\` DROP FOREIGN KEY \`FK_3bf3f72d1417d6ec542a4665116\``);
        await queryRunner.query(`ALTER TABLE \`orderStatus\` DROP FOREIGN KEY \`FK_7e8150a61d7f184d1da4b72857a\``);
        await queryRunner.query(`ALTER TABLE \`sheetOrder\` DROP FOREIGN KEY \`FK_921340992a871353a00bcf9e156\``);
        await queryRunner.query(`ALTER TABLE \`sheetOrder\` DROP FOREIGN KEY \`FK_30a67e48d918830c0ae1553b5db\``);
        await queryRunner.query(`ALTER TABLE \`sheetOrderStatusHistory\` DROP FOREIGN KEY \`FK_e80b14bb26efa9a7cd573d1e259\``);
        await queryRunner.query(`ALTER TABLE \`sheetOrderStatusHistory\` DROP FOREIGN KEY \`FK_c5320338c30a49742418504f17d\``);
        await queryRunner.query(`ALTER TABLE \`courierSheet\` DROP FOREIGN KEY \`FK_a47d0847d957c8c131b7fdb8198\``);
        await queryRunner.query(`DROP INDEX \`IDX_eef4b47b0a1c58c9b71c1a4930\` ON \`requestTo\``);
        await queryRunner.query(`DROP INDEX \`IDX_b0948e735107443bfd4b56da73\` ON \`requestTo\``);
        await queryRunner.query(`DROP TABLE \`requestTo\``);
        await queryRunner.query(`DROP INDEX \`userId\` ON \`userRole\``);
        await queryRunner.query(`DROP TABLE \`userRole\``);
        await queryRunner.query(`DROP TABLE \`user\``);
        await queryRunner.query(`DROP INDEX \`fromId\` ON \`request\``);
        await queryRunner.query(`DROP TABLE \`request\``);
        await queryRunner.query(`DROP INDEX \`requestId\` ON \`requestStatusHistory\``);
        await queryRunner.query(`DROP TABLE \`requestStatusHistory\``);
        await queryRunner.query(`DROP INDEX \`userId\` ON \`userAddress\``);
        await queryRunner.query(`DROP TABLE \`userAddress\``);
        await queryRunner.query(`DROP INDEX \`userId\` ON \`order\``);
        await queryRunner.query(`DROP INDEX \`merchantId\` ON \`order\``);
        await queryRunner.query(`DROP INDEX \`userAddressId\` ON \`order\``);
        await queryRunner.query(`DROP TABLE \`order\``);
        await queryRunner.query(`DROP INDEX \`secondOrderId\` ON \`orderRelation\``);
        await queryRunner.query(`DROP TABLE \`orderRelation\``);
        await queryRunner.query(`DROP INDEX \`itemSku\` ON \`orderItem\``);
        await queryRunner.query(`DROP TABLE \`orderItem\``);
        await queryRunner.query(`DROP INDEX \`merchantId\` ON \`item\``);
        await queryRunner.query(`DROP TABLE \`item\``);
        await queryRunner.query(`DROP INDEX \`itemSku\` ON \`itemInBox\``);
        await queryRunner.query(`DROP INDEX \`boxId\` ON \`itemInBox\``);
        await queryRunner.query(`DROP TABLE \`itemInBox\``);
        await queryRunner.query(`DROP INDEX \`ballotId\` ON \`box\``);
        await queryRunner.query(`DROP TABLE \`box\``);
        await queryRunner.query(`DROP INDEX \`rackId\` ON \`ballot\``);
        await queryRunner.query(`DROP TABLE \`ballot\``);
        await queryRunner.query(`DROP INDEX \`inventoryId\` ON \`rack\``);
        await queryRunner.query(`DROP TABLE \`rack\``);
        await queryRunner.query(`DROP TABLE \`inventory\``);
        await queryRunner.query(`DROP INDEX \`inventoryId\` ON \`inventorySupport\``);
        await queryRunner.query(`DROP TABLE \`inventorySupport\``);
        await queryRunner.query(`DROP INDEX \`inventoryId\` ON \`inventoryPrices\``);
        await queryRunner.query(`DROP TABLE \`inventoryPrices\``);
        await queryRunner.query(`DROP INDEX \`itemInBoxId\` ON \`inventoryHistory\``);
        await queryRunner.query(`DROP TABLE \`inventoryHistory\``);
        await queryRunner.query(`DROP INDEX \`itemSku\` ON \`itemPrices\``);
        await queryRunner.query(`DROP TABLE \`itemPrices\``);
        await queryRunner.query(`DROP TABLE \`merchant\``);
        await queryRunner.query(`DROP INDEX \`userId\` ON \`financialAccount\``);
        await queryRunner.query(`DROP INDEX \`merchantId\` ON \`financialAccount\``);
        await queryRunner.query(`DROP TABLE \`financialAccount\``);
        await queryRunner.query(`DROP INDEX \`fromAccountId\` ON \`expense\``);
        await queryRunner.query(`DROP TABLE \`expense\``);
        await queryRunner.query(`DROP INDEX \`fromAccountId\` ON \`financialTransaction\``);
        await queryRunner.query(`DROP INDEX \`toAccountId\` ON \`financialTransaction\``);
        await queryRunner.query(`DROP INDEX \`approvedById\` ON \`financialTransaction\``);
        await queryRunner.query(`DROP TABLE \`financialTransaction\``);
        await queryRunner.query(`DROP TABLE \`financialRequestStatus\``);
        await queryRunner.query(`DROP INDEX \`orderId\` ON \`orderStatus\``);
        await queryRunner.query(`DROP TABLE \`orderStatus\``);
        await queryRunner.query(`DROP INDEX \`sheetId\` ON \`sheetOrder\``);
        await queryRunner.query(`DROP INDEX \`orderId\` ON \`sheetOrder\``);
        await queryRunner.query(`DROP TABLE \`sheetOrder\``);
        await queryRunner.query(`DROP INDEX \`sheetOrderId\` ON \`sheetOrderStatusHistory\``);
        await queryRunner.query(`DROP INDEX \`userId\` ON \`sheetOrderStatusHistory\``);
        await queryRunner.query(`DROP TABLE \`sheetOrderStatusHistory\``);
        await queryRunner.query(`DROP INDEX \`userId\` ON \`courierSheet\``);
        await queryRunner.query(`DROP TABLE \`courierSheet\``);
        await queryRunner.query(`DROP TABLE \`role\``);
    }

}
