# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type item {
  sku: String!
  merchantSku: String!
  merchantId: Int!
  name: String!
  color: String
  colorHex: String
  size: String
  description: String!
  imageUrl: String!
  createdAt: Timestamp!
  lastModified: Timestamp!
  prices(currency: String!): [itemPrice!]!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type itemPrice {
  id: Int!
  itemSku: String!
  currency: String!
  price: String!
  discount: String
  startDiscount: Timestamp
  endDiscount: Timestamp
}

type itemInBox {
  id: Int!
  inventoryId: Int!
  merchantId: Int
  itemSku: String!
  boxId: Int!
  count: Int!
  minCount: Int!
  createdAt: Timestamp!
  lastModified: Timestamp!
  totalCount: Int!
  item: item!
}

type inventoryHistory {
  id: Int!
  itemInBoxId: Int!
  description: String!
  type: Int!
  amount: Int!
  createdAt: Timestamp!
  lastModified: Timestamp!
}

type ItemPage {
  cursor: GraphqlCursor!
  data: [item!]!
}

"""Cursor scalar type for pagination"""
scalar GraphqlCursor

type ItemInBoxPage {
  cursor: GraphqlCursor!
  data: [itemInBox!]!
}

type order {
  id: Int!
  otherId: Int
  type: OrderType!
  paymentType: PaymentType!
  userId: String!
  merchantId: Int!
  userAddressId: Int!
  shippingPrice: String
  includesVat: Boolean!
  canOpen: Boolean!
  fragile: Boolean!
  deliveryPart: Boolean!
  createdAt: Timestamp!
  lastModified: Timestamp!
  items: [orderItem!]!
}

enum OrderType {
  delivery
  exchange
  refund
  freeDelivery
  gift
  freeOfCharge
}

enum PaymentType {
  cash
  card
  free
}

type orderItem {
  orderId: Int!
  itemSku: String!
  count: Int!
  frozenPrice: String!
  frozenCurrency: String!
  partial: Boolean!
  partialCount: Int!
  createdAt: Timestamp!
  lastModified: Timestamp!
  order: order!
  info: item!
  inventory: [itemInBox!]!
}

type financialAccount {
  id: Int!
  name: String!
  userId: String!
  merchantId: Int!
  balance: String
  createdAt: Timestamp!
  lastModified: Timestamp!
}

type request {
  id: Int!
  type: RequestType!
  priority: Int!
  fromId: String!
  description: String!
  extraData: String!
  status: Int!
  createdAt: Timestamp!
  lastModified: Timestamp!
}

enum RequestType {
  notification
  confirmation
  authorization
  subscription
  verification
  reminder
  invitation
  passwordReset
  accountUpdate
  transactionUpdate
  policyUpdate
  announcement
  feedback
  support
  marketing
  survey
  report
  inquiry
  appointment
  request
  orderProblem
  paymentReminder
  invoice
  other
}

type user {
  id: String!
  type: UserType!
  hubId: Int
  merchantId: Int
  name: String!
  email: String!
  phone: String!
  birthdate: Timestamp!
  refreshToken: String
  createdAt: Timestamp!
  lastModified: Timestamp!
  deletedAt: Timestamp
  userRoles: [UserRole!]
}

enum UserType {
  admin
  finance
  inventory
  merchant
  courier
  customer
  customerService
}

type UserRole {
  userId: String!
  roleId: Int!
  role: Role!
}

type UserPage {
  cursor: GraphqlCursor!
  data: [user!]!
}

type Role {
  id: Int!
  name: String!
  type: String!
  description: String!
  createdAt: Timestamp!
  lastModified: Timestamp!
}

type requestStatusHistory {
  id: Int!
  requestId: Int!
  status: RequestStatus!
  userId: Int!
  createdAt: Timestamp!
}

enum RequestStatus {
  sent
  pending
  read
  rejected
  accepted
  expired
}

type orderStatus {
  id: Int!
  orderId: Int!
  status: OrderStatusEnum!
  description: String!
  createdAt: Timestamp!
  lastModified: Timestamp!
}

enum OrderStatusEnum {
  idle
  shippedFromCourier
  transferring
  assignedToCourier
  outForDelivery
  delivered
  partiallyDelivered
  failedDeliveryAttempt
  postponed
}

type courierSheet {
  id: Int!
  userId: String!
  status: CourierSheetStatus!
  createdAt: Timestamp!
  lastModified: Timestamp!
  sheetOrders: [sheetOrder!]!
  orders: [sheetOrder!]!
}

enum CourierSheetStatus {
  inProgress
  waitingForAdmin
  waitingForFinance
  complete
}

type sheetOrder {
  id: Int!
  sheetId: Int!
  orderId: Int!
  adminPass: Boolean!
  financePass: Boolean!
  transactionId: Int!
  createdAt: Timestamp!
  sheet: courierSheet!
  info: order!
}

type sheetOrderStatusHistory {
  id: Int!
  sheetOrderId: Int!
  status: SheetOrderStatus!
  description: String!
  userId: String!
  createdAt: Timestamp!
}

enum SheetOrderStatus {
  adminApproved
  adminRejected
  financeAccepted
  financeRejected
}

type CourierSheetPage {
  cursor: GraphqlCursor!
  data: [courierSheet!]!
}

type userAddress {
  id: Int!
  userId: String!
  countryId: Int!
  cityId: Int!
  details: String!
  createdAt: Timestamp!
  lastModified: Timestamp!
}

type merchant {
  id: Int!
  name: String!
  includesVat: Boolean!
  createdAt: Timestamp!
  lastModified: Timestamp!
}

type orderRelation {
  firstOrderId: Int!
  secondOrderId: Int!
  createdAt: Timestamp!
}

type inventorySupport {
  id: Int!
  inventoryId: Int!
  governorateId: Int!
  zoneId: Int!
  inventory: inventory!
}

type inventory {
  id: Int!
  hubId: Int
  name: String!
  module: Int!
  zoneId: Int!
  location: GeoLocation!
  rentType: Int!
  createdAt: Timestamp!
  lastModified: Timestamp!
  inventoryPrices: [inventoryPrice!]!
  inventorySupports: [inventorySupport!]!
  racks: [rack!]!
}

"""Geo location representation."""
scalar GeoLocation

type inventoryPrice {
  id: Int!
  inventoryId: Int!
  currency: String!
  pricePerUnit: String!
  discount: String
  startDiscount: Timestamp
  endDiscount: Timestamp
  inventory: inventory!
}

type rack {
  id: Int!
  merchantId: Int
  inventoryId: Int!
  levels: Int!
  name: String!
  createdAt: Timestamp!
  lastModified: Timestamp!
}

type ballot {
  id: Int!
  merchantId: Int
  rackId: Int!
  level: Int!
  name: String!
  createdAt: Timestamp!
  lastModified: Timestamp!
}

type box {
  id: Int!
  merchantId: Int
  ballotId: Int!
  name: String!
  createdAt: Timestamp!
  lastModified: Timestamp!
}

type financialTransaction {
  id: Int!
  type: TransactionType!
  description: String!
  fromAccountId: String!
  toAccountId: String!
  amount: String
  receipt: String!
  latestStatus: Int!
  approvedById: String!
  createdAt: Timestamp!
}

enum TransactionType {
  deposit
  withdrawal
  transfer
  refund
  adjustment
  interest
  donation
  conversion
  reward
  subscription
  rent
  payment
  other
}

type financalRequestStatus {
  requestId: Int!
  status: TransactionStatus!
  createdAt: Timestamp!
}

enum TransactionStatus {
  pendingSender
  pendingReceiver
  processingBySender
  processingByReceiver
  rejectedBySender
  rejectedByReceiver
  cancelledBySender
  completed
  failed
}

type OrderPage {
  cursor: GraphqlCursor!
  data: [order!]!
}

type expense {
  id: Int!
  type: ExpenseType!
  fromAccountId: Int!
  amount: String
  receipt: String!
  comment: String!
  createdAt: Timestamp!
}

enum ExpenseType {
  salary
  rent
  utilities
  officeSupplies
  vehicleMaintenance
  fuel
  insurance
  equipmentPurchase
  marketing
  softwareSubscriptions
  legalFees
  training
  taxes
  loanRepayments
  interest
  officeRent
  warehouseRent
  travelExpenses
  professionalServices
  maintenance
  securityServices
  packagingMaterials
  cleaningServices
  wasteDisposal
  officeEquipment
  internetServices
  telecommunication
  officeFurniture
  membershipFees
  professionalDevelopment
  vehicleLease
  advertising
  deliveryExpenses
  miscellaneous
}

type Listener {
  """Example field (placeholder)"""
  exampleField: Int!
}

type EventListenObject {
  message: String!
}

type UserTokenResponse {
  user: user!
  userRoles: [UserRole!]!
  accessToken: String!
  refreshToken: String!
}

type EmailValidityPayload {
  isValid: Boolean!
  id: String
}

type Hub {
  id: Int!
  name: String!
  governorateId: Int!
  zoneId: Int!
}

type Query {
  findRoles: [Role!]!
  role(id: Int!): Role!
  paginateItemsById(itemPageInput: paginateItemsInput): ItemPage!
  findSingleItem(id: String!): item!
  itemPrices: [itemPrice!]!
  itemPrice(id: Int!): itemPrice!
  itemInBox(id: Int!): itemInBox!
  paginateItemInBox(input: ItemInBoxPageInput!): ItemInBoxPage!
  inventoryHistory(id: Int!): inventoryHistory!
  rack(id: Int!): rack!
  ballot(id: Int!): ballot!
  box(id: Int!): box!
  orderItem(id: Int!): orderItem!
  sheetOrder(id: Int!): sheetOrder!
  paginateOrders(input: PaginateOrdersInput!): OrderPage!
  order(id: Int!): order!
  findAllInventories: [inventory!]!
  findOneInventory(input: FindInventoryInput!): inventory!
  inventoryPrices: [inventoryPrice!]!
  inventoryPrice(id: Int!): inventoryPrice!
  inventorySupport(id: Int!): inventorySupport!
  orderRelation(id: Int!): orderRelation!
  merchant(id: Int!): merchant!
  paginateUsers(paginateUsersInput: PaginationInput!): UserPage!
  request(id: Int!): request!
  userAddress(id: Int!): userAddress!
  findAllCourierSheets: [courierSheet!]!
  paginateCourierSheets(input: PaginateCourierSheetInput!): CourierSheetPage!
  sheetOrderStatusHistory(id: Int!): sheetOrderStatusHistory!
  orderStatus(id: Int!): orderStatus!
  requestStatusHistory(id: Int!): requestStatusHistory!
  financialAccount(id: Int!): financialAccount!
  expense(id: Int!): expense!
  financialTransaction(id: Int!): financialTransaction!
  financialRequestStatus(id: Int!): financalRequestStatus!
  isValidEmail(email: String!): EmailValidityPayload!
  sendToEvent: EventListenObject!
  listeners: [Listener!]!
  listener(id: Int!): Listener!
  hub(id: Int!): Hub!
}

input paginateItemsInput {
  isAsc: Boolean! = true
  limit: Int! = 1
  afterCursor: String
  beforeCursor: String
  merchantId: Int
}

input ItemInBoxPageInput {
  isAsc: Boolean! = true
  limit: Int! = 1
  afterCursor: String
  beforeCursor: String
  inventoryIds: [Int!]
}

input PaginateOrdersInput {
  isAsc: Boolean! = true
  limit: Int! = 1
  afterCursor: String
  beforeCursor: String
  merchantId: Int
}

input FindInventoryInput {
  id: Int
  hubId: Int
}

input PaginationInput {
  isAsc: Boolean! = true
  limit: Int! = 1
  afterCursor: String
  beforeCursor: String
}

input PaginateCourierSheetInput {
  isAsc: Boolean! = true
  limit: Int! = 1
  afterCursor: String
  beforeCursor: String
}

type Mutation {
  removeUserRole(id: Int!): UserRole!
  updateUserRoles(input: UpdateUserRoleInput!): Boolean!
  updateUserRolesOptimized(input: UpdateUserRoleInputAdvanced!): Boolean!
  createRole(createRoleInput: CreateRolesInput!): Role!
  updateRole(updateRoleInput: UpdateRoleInput!): Role!
  removeRole(id: Int!): Role!
  createItem(createItemInput: CreateItemInput!): Int!
  createFakeItem(count: Int! = 1): Boolean!
  updateItem(updateItemInput: UpdateItemInput!): item!
  removeItem(id: Int!): item!
  createItemPrice(createItemPriceInput: CreateItemPriceInput!): itemPrice!
  updateItemPrice(updateItemPriceInput: UpdateItemPriceInput!): itemPrice!
  removeItemPrice(id: Int!): itemPrice!
  createItemInBox(createItemInBoxInput: CreateItemInBoxInput!): itemInBox!
  exportItem(input: ItemCountInput!): Boolean!
  importNewItem(input: ImportItemInput!): Boolean!
  importItem(input: ItemCountInput!): Boolean!
  updateItemInBox(updateItemInBoxInput: UpdateItemInBoxInput!): itemInBox!
  removeItemInBox(id: Int!): itemInBox!
  createInventoryHistory(createInventoryHistoryInput: CreateInventoryHistoryInput!): inventoryHistory!
  updateInventoryHistory(updateInventoryHistoryInput: UpdateInventoryHistoryInput!): inventoryHistory!
  removeInventoryHistory(id: Int!): inventoryHistory!
  createRack(createRackInput: CreateRackInput!): rack!
  updateRack(updateRackInput: UpdateRackInput!): rack!
  removeRack(id: Int!): rack!
  createBallot(createBallotInput: CreateBallotInput!): ballot!
  updateBallot(updateBallotInput: UpdateBallotInput!): ballot!
  removeBallot(id: Int!): ballot!
  createBox(createBoxInput: CreateBoxInput!): box!
  updateBox(updateBoxInput: UpdateBoxInput!): box!
  removeBox(id: Int!): box!
  createOrderItem(createOrderItemInput: CreateOrderItemInput!): orderItem!
  updateOrderItem(updateOrderItemInput: UpdateOrderItemInput!): orderItem!
  removeOrderItem(id: Int!): orderItem!
  createSheetOrder(createSheetOrderInput: CreateSheetOrderInput!): sheetOrder!
  updateSheetOrder(updateSheetOrderInput: UpdateSheetOrderInput!): sheetOrder!
  removeSheetOrder(id: Int!): sheetOrder!
  createOrder(input: CreateOrderInput!): Boolean!
  updateOrder(updateOrderInput: UpdateOrderInput!): order!
  removeOrder(id: Int!): order!
  createFakeInventory(count: Int! = 1): Boolean!
  createInventory(input: CreateInventoryInput!): Boolean!
  updateInventory(updateInventoryInput: UpdateInventoryInput!): inventory!
  removeInventory(id: Int!): inventory!
  createInventoryPrice(createInventoryPriceInput: CreateInventoryPriceInput!): inventoryPrice!
  updateInventoryPrice(updateInventoryPriceInput: UpdateInventoryPriceInput!): inventoryPrice!
  removeInventoryPrice(id: Int!): inventoryPrice!
  createInventorySupport(createInventorySupportInput: CreateInventorySupportInput!): inventorySupport!
  updateInventorySupport(updateInventorySupportInput: UpdateInventorySupportInput!): inventorySupport!
  removeInventorySupport(id: Int!): inventorySupport!
  createOrderRelation(createOrderRelationInput: CreateOrderRelationInput!): orderRelation!
  updateOrderRelation(updateOrderRelationInput: UpdateOrderRelationInput!): orderRelation!
  removeOrderRelation(id: Int!): orderRelation!
  createMerchant(createMerchantInput: CreateMerchantInput!): merchant!
  createFakeMerchant(count: Int! = 1): Boolean!
  updateMerchant(updateMerchantInput: UpdateMerchantInput!): merchant!
  removeMerchant(id: Int!): merchant!
  createUser(createUserInput: CreateUserInput!): Boolean!
  createFakeUser(count: Int! = 1): Boolean!
  updateUserType(updateInfo: UpdateUserTypeInput!): Boolean!
  updateMyInfo(updateInfo: UpdateUserInput!): Boolean!
  removeUser(id: Int!): user!
  createRequest(createRequestInput: CreateRequestInput!): request!
  updateRequest(updateRequestInput: UpdateRequestInput!): request!
  removeRequest(id: Int!): request!
  createUserAddress(createUserAddressInput: CreateUserAddressInput!): userAddress!
  updateUserAddress(updateUserAddressInput: UpdateUserAddressInput!): userAddress!
  removeUserAddress(id: Int!): userAddress!
  createCourierSheet(input: CreateCourierSheetInput!): Boolean!
  updateCourierSheet(updateCourierSheetInput: UpdateCourierSheetInput!): courierSheet!
  removeCourierSheet(id: Int!): courierSheet!
  createSheetOrderStatusHistory(createSheetOrderStatusHistoryInput: CreateSheetOrderStatusHistoryInput!): sheetOrderStatusHistory!
  updateSheetOrderStatusHistory(updateSheetOrderStatusHistoryInput: UpdateSheetOrderStatusHistoryInput!): sheetOrderStatusHistory!
  removeSheetOrderStatusHistory(id: Int!): sheetOrderStatusHistory!
  createOrderStatus(createOrderStatusInput: CreateOrderStatusInput!): orderStatus!
  updateOrderStatus(updateOrderStatusInput: UpdateOrderStatusInput!): orderStatus!
  removeOrderStatus(id: Int!): orderStatus!
  createRequestStatusHistory(createRequestStatusHistoryInput: CreateRequestStatusHistoryInput!): requestStatusHistory!
  updateRequestStatusHistory(updateRequestStatusHistoryInput: UpdateRequestStatusHistoryInput!): requestStatusHistory!
  removeRequestStatusHistory(id: Int!): requestStatusHistory!
  createFinancialAccount(createFinancialAccountInput: CreateFinancialAccountInput!): financialAccount!
  updateFinancialAccount(updateFinancialAccountInput: UpdateFinancialAccountInput!): financialAccount!
  removeFinancialAccount(id: Int!): financialAccount!
  createExpense(createExpenseInput: CreateExpenseInput!): expense!
  updateExpense(updateExpenseInput: UpdateExpenseInput!): expense!
  removeExpense(id: Int!): expense!
  createFinancialTransaction(createFinancialTransactionInput: CreateFinancialTransactionInput!): financialTransaction!
  updateFinancialTransaction(updateFinancialTransactionInput: UpdateFinancialTransactionInput!): financialTransaction!
  removeFinancialTransaction(id: Int!): financialTransaction!
  createFinancialRequestStatus(createFinancialRequestStatusInput: CreateFinancialRequestStatusInput!): financalRequestStatus!
  updateFinancialRequestStatus(updateFinancialRequestStatusInput: UpdateFinancialRequestStatusInput!): financalRequestStatus!
  removeFinancialRequestStatus(id: Int!): financalRequestStatus!
  requestToken(requestTokenInput: TokenRequestInput!): UserTokenResponse!
  updateListener(updateListenerInput: UpdateListenerInput!): Listener!
  removeListener(id: Int!): Listener!
  createHub(createHubInput: CreateHubInput!): Hub!
  updateHub(updateHubInput: UpdateHubInput!): Hub!
  removeHub(id: Int!): Hub!
}

input UpdateUserRoleInput {
  id: String!
  rolesToRemove: [Int!]!
  rolesToAdd: [Int!]!
}

input UpdateUserRoleInputAdvanced {
  id: String!
  roles: [Int!]!
}

input CreateRolesInput {
  roles: [Int!]!
}

input UpdateRoleInput {
  roles: [Int!]
  id: Int!
}

input CreateItemInput {
  sku: String!
  merchantSku: String
  merchantId: Int
  name: String!
  color: String
  size: String
  description: String!
  imageUrl: String!
  itemPrices: [CreateItemPriceInput!]!
}

input CreateItemPriceInput {
  currency: String = "EGP"
  price: Float!
  discount: Float
  startDiscount: Timestamp
  endDiscount: Timestamp
}

input UpdateItemInput {
  sku: String
  merchantSku: String
  merchantId: Int
  name: String
  color: String
  size: String
  description: String
  imageUrl: String
  itemPrices: [CreateItemPriceInput!]
  id: Int!
}

input UpdateItemPriceInput {
  currency: String = "EGP"
  price: Float
  discount: Float
  startDiscount: Timestamp
  endDiscount: Timestamp
  id: Int!
}

input CreateItemInBoxInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input ItemCountInput {
  id: Int!
  count: Int!
}

input ImportItemInput {
  itemSku: String!
  inventoryId: Int!
  boxId: Int!
  count: Int!
  minCount: Int!
}

input UpdateItemInBoxInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateInventoryHistoryInput {
  itemInBoxId: Int!
  description: String!
  type: Int!
  amount: Int!
}

input UpdateInventoryHistoryInput {
  itemInBoxId: Int
  description: String
  type: Int
  amount: Int
  id: Int!
}

input CreateRackInput {
  inventoryId: Int!
  name: String!
}

input UpdateRackInput {
  inventoryId: Int
  name: String
  id: Int!
}

input CreateBallotInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateBallotInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateBoxInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateBoxInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateOrderItemInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateOrderItemInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateSheetOrderInput {
  sheetId: Int
  orderId: Int!
}

input UpdateSheetOrderInput {
  sheetId: Int
  orderId: Int
  id: Int!
}

input CreateOrderInput {
  otherId: Int
  type: OrderType = delivery
  paymentType: PaymentType = cash
  userId: String!
  merchantId: Int!
  userAddressId: Int!
  shippingPrice: String!
  includesVat: Boolean = true
  canOpen: Boolean = false
  fragile: Boolean = false
  deliveryPart: Boolean = false
  orderItems: [OrderItemInput!]!
}

input OrderItemInput {
  itemSku: String!
  frozenPrice: String!
  frozenCurrency: String!
  count: Int!
}

input UpdateOrderInput {
  otherId: Int
  type: OrderType = delivery
  paymentType: PaymentType = cash
  userId: String
  merchantId: Int
  userAddressId: Int
  shippingPrice: String
  includesVat: Boolean = true
  canOpen: Boolean = false
  fragile: Boolean = false
  deliveryPart: Boolean = false
  orderItems: [OrderItemInput!]
  id: Int!
}

input CreateInventoryInput {
  name: String!
  rentType: Int!
  zoneId: Int
  hubId: Int
  module: Int
  location: GeoLocation
  numberOfRacks: Int
  rackLevel: Int
  ballotPerRack: Int
  boxPerBallot: Int
  inventoryPrices: [AddInventoryPriceInput!]
}

input AddInventoryPriceInput {
  currency: String!
  pricePerUnit: Float!
  discount: Float
  startDiscount: Timestamp
  endDiscount: Timestamp
}

input UpdateInventoryInput {
  name: String
  rentType: Int
  zoneId: Int
  hubId: Int
  module: Int
  location: GeoLocation
  numberOfRacks: Int
  rackLevel: Int
  ballotPerRack: Int
  boxPerBallot: Int
  inventoryPrices: [AddInventoryPriceInput!]
  id: Int!
}

input CreateInventoryPriceInput {
  inventoryId: Int!
  currency: String!
  pricePerUnit: Float!
  discount: Float
  startDiscount: Timestamp
  endDiscount: Timestamp
}

input UpdateInventoryPriceInput {
  inventoryId: Int
  currency: String
  pricePerUnit: Float
  discount: Float
  startDiscount: Timestamp
  endDiscount: Timestamp
  id: Int!
}

input CreateInventorySupportInput {
  inventoryId: String!
  zoneId: Int!
  governorateId: Int!
}

input UpdateInventorySupportInput {
  inventoryId: String
  zoneId: Int
  governorateId: Int
  id: Int!
}

input CreateOrderRelationInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateOrderRelationInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateMerchantInput {
  name: String!
  includesVat: Boolean!
}

input UpdateMerchantInput {
  name: String
  includesVat: Boolean
  id: Int!
}

input CreateUserInput {
  id: String
  name: String!
  email: String!
  phone: String!
  type: UserType!
  birthdate: Timestamp!
}

input UpdateUserTypeInput {
  id: String!
  type: UserType!
}

input UpdateUserInput {
  name: String
  email: String
  phone: String
  type: UserType
  birthdate: Timestamp
}

input CreateRequestInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateRequestInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateUserAddressInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateUserAddressInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateCourierSheetInput {
  userId: String!
  orderIds: [Int!]!
}

input UpdateCourierSheetInput {
  userId: String
  orderIds: [Int!]
  id: Int!
}

input CreateSheetOrderStatusHistoryInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateSheetOrderStatusHistoryInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateOrderStatusInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateOrderStatusInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateRequestStatusHistoryInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateRequestStatusHistoryInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateFinancialAccountInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateFinancialAccountInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateExpenseInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateExpenseInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateFinancialTransactionInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateFinancialTransactionInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateFinancialRequestStatusInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateFinancialRequestStatusInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input TokenRequestInput {
  firebaseToken: String!
  id: String
}

input UpdateListenerInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateHubInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateHubInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

type Subscription {
  listenToEvent: EventListenObject!
}